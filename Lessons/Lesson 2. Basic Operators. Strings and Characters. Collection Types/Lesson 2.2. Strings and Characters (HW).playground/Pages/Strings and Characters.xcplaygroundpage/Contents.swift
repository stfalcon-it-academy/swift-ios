/*: # Strings and Characters (Строки и символы) */
//:
//: Строка представляет собой совокупность символов, например `"hello, world"` или `"albatross"`. Строки в `Swift` представлены типом `String`, который, в свою очередь, представляет собой коллекцию значений типа `Character`.
//:
//: Типы `String` и `Character` в `Swift` предусматривают быстрый, Unicode-совместимый способ работы с текстом в коде. Синтаксис для создания и манипулирования строками легкий и читабельный, он включает синтаксис строковых литералов, похожий на `С`. Конкатенация строк так же проста, как сложение двух строк с помощью оператора `+` , а изменчивостью строки можно управлять, выбирая, чему присваивать значение - константе или переменной, также как в случае с любым другим значением в `Swift`.
//:
//: Несмотря на эту простоту синтаксиса, тип `String` в `Swift` имеет быструю и современную реализацию. Каждая строка состоит из независимых от кодировки символов Unicode и обеспечивает поддержку доступа к этим символам в различных Unicode представлениях.
/*:
 * note:
 Тип `String` в `Swift` бесшовно сшит с классом `NSString` из `Foundation`. Если вы работаете с фреймворком `Foundation` в `Cocoa` или `Cocoa Touch`, то весь `API NSString` доступен для каждого значения типа `String`, создаваемого вами в `Swift`. Вы также можете использовать значение с типом `String` для любых `API`, в которых используется `NSString`.
 */
//:
//: Более подробно о взаимодействии `String` и `Foundation и Cocoa` см. в [Using Swift with Cocoa and Objective-C (Swift 2.2)](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216)
//:
/*: */
//: [String Literals](@next)
