/*: ## Ternary Conditional Operator (Тернарный условный оператор) */
//:
//: *Тернарный условный оператор* — это специальный оператор из трех частей, имеющий следующий синтаксис: `выражение ? действие1 : действие2`. Он выполняет одно из двух действий в зависимости от того, является ли выражение истиной или ложью. Если `выражение` истинно, оператор выполняет `действие1` и возвращает его результат; в противном случае оператор выполняет `действие2` и возвращает его результат.
//:
/*:
 *Тернарный условный оператор* является краткой записью следующего кода:
    
        if question {
            answer1
        } else { answer2 }
 */
//:
//: Ниже приведен пример расчета высоты строки в таблице. Если у строки есть заголовок, то она должна быть выше своего содержимого на 50 точек, а если заголовка нет, то на 20 точек:
//:
import Foundation

let contentHeight1 = 40
let hasHeader1 = true
let rowHeight1 = contentHeight1 + (hasHeader1 ? 50 : 20)
//:
//: В развернутом виде этот код можно записать так:
//:
let contentHeight2 = 40
let hasHeader2 = true
let rowHeight2: Int

if hasHeader2 {
    rowHeight2 = contentHeight2 + 50
} else {
    rowHeight2 = contentHeight2 + 20
}
//:
//: В первом примере с помощью *тернарного условного оператора* величине `rowHeight` в одну строку присваивается правильное значение. Этот вариант не только короче второго примера, но и позволяет объявить величину `rowHeight` константой, так как в отличие от конструкции `if` ее значение не нужно изменять.
//:
//: *Тернарный условный оператор* — это короткая и удобная конструкция для выбора между двумя выражениями. Однако *тернарный условный оператор* следует применять с осторожностью. Избыток таких коротких конструкций иногда делает код трудным для понимания. В частности, лучше не использовать несколько *тернарных условных операторов* в одном составном операторе присваивания.
//:
/*:
 
*/
//: [Examples. Comparison Operators](@previous) | [Examples. Ternary Conditional Operator](@next)
