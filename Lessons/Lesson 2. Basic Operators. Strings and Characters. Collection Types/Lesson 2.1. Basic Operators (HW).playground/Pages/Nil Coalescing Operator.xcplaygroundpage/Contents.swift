/*: ## Nil Coalescing Operator (Оператор объединения по nil) */
//:
//: *Оператор объединения по nil* `(a ?? b)` извлекает опционал `a`, если он содержит значение, или возвращает значение по умолчанию `b`, если `a` равно `nil`. Выражение `a` может быть только опционалом. Выражение `b` должно быть такого же типа, что и значение внутри `a`.
//:
//: *Оператор объединения по nil* является краткой записью следующего кода:
//:
//: `a != nil ? a! : b`
//:
//: В вышеприведенном коде *тернарный условный оператор* и принудительное извлечение `(a!)` используются для обращения к значению внутри `a`, если `a` не равно `nil`, или для возвращения `b` в противном случае. *Оператор объединения по nil* — это более элегантный, короткий и понятный способ одновременно проверить условие и извлечь значение.
//:
/*:
 * note:
 Если `a` не равно `nil`, выражение `b` не анализируется. Такой подход называется *краткой проверкой условия (short-circuit evaluation)*.
*/
//: В следующем примере *оператор объединения по nil* выбирает между стандартным значением цвета и пользовательским:
//:
import Foundation

let defaultColorName = "red"
var userDefinedColorName: String?

var colorNameToUse = userDefinedColorName ?? defaultColorName
//:
//: Переменная `userDefinedColorName` объявлена как строковый `String` опционал и по умолчанию равна `nil`. Так как `userDefinedColorName` является опционалом, ее значение можно анализировать посредством *оператора объединения по nil*. В вышеприведенном примере этот оператор задает начальное значение для строковой `String` переменной.
//: `userDefinedColorName ?? defaultColorName` возвратит значение `defaultColorName`, т.е. `red`.
//:
//: Если переменной `userDefinedColorName` присвоить отличное от `nil` значение и снова передать ее в *оператор объединения по nil*, вместо значения по умолчанию будет использовано значение внутри `userDefinedColorName`:
//:
userDefinedColorName = "green"
colorNameToUse = userDefinedColorName ?? defaultColorName
//:
/*:
 
*/
//: [Examples. Ternary Conditional Operator](@previous) | [Examples. Nil Coalescing Operator](@next)
