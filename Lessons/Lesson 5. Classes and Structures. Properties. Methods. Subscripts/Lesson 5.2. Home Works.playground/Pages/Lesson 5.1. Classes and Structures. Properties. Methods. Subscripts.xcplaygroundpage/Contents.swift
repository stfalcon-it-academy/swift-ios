/*: ## Home Work (Домашнее задание) */
//:

import Foundation


// Classes and Structures
// 1.1. Создайте структуру Студент. Добавьте свойства: имя, фамилия, год рождения, средний бал. Создайте несколько экземпляров этой структуры и заполните их данными. Положите их всех в массив (журнал).


// 1.2. Напишите функцию, которая принимает массив студентов и выводит в консоль данные каждого. Перед выводом каждого студента добавляйте порядковый номер в “журнале”, начиная с 1.


// 1.3. С помощью функции sorted отсортируйте массив по среднему баллу, по убыванию и распечатайте “журнал”.


// 1.4. Отсортируйте теперь массив по фамилии (по возрастанию), причем если фамилии одинаковые, а вы сделайте так чтобы такое произошло, то сравниваются по имени. Распечатайте “журнал”.


// 1.5. Создайте переменную и присвойте ей ваш существующий массив. Измените в нем данные всех студентов. Изменится ли первый массив? Распечатайте оба массива.


// 1.6. Теперь проделайте все тоже самое, но не для структуры Студент, а для класса. Какой результат в 5м задании? Что изменилось и почему?




// Properties
// 2.1. Создать структуру “Описание файла” содержащую свойства:
// - путь к файлу
// - имя файла
// - максимальный размер файла на диске
// - путь к папке, содержащей этот файл
// - тип файла (скрытый или нет)
// - содержимое файла (можно просто симулировать контент)
// Главная задача - это использовать правильные свойства там, где нужно, чтобы не пришлось хранить одни и те же данные в разных местах и т.д. и т.п.


// 2.2. Создайте энум, который будет представлять некую цветовую гамму. Этот энум должен быть типа Int и как raw значение должен иметь соответствующее 3 байтное представление цвета. Добавьте в этот энум 3 свойства типа: количество цветов в гамме, начальный цвет и конечный цвет.


// 2.3. Создайте класс человек, который будет содержать имя, фамилию, возраст, рост и вес. Добавьте несколько свойств непосредственно этому классу чтобы контролировать:
// - минимальный и максимальный возраст каждого объекта
// - минимальную и максимальную длину имени и фамилии
// - минимально возможный рост и вес
// - самое интересное, создайте свойство, которое будет содержать количество созданных объектов этого класса



// Methods
// 3.1. Создайте тип Комната. У комнаты есть размеры W на H. И создайте тип Персонаж. У негоесть координата в комнате X и Y. Реализуйте функцию, которая красивенько текстом будет показывать положение персонажа в комнате


// 3.2. Персонажу добавьте метод идти, который принимает энумчик лево, право, верх, вниз Этот метод должен передвигать персонажа. Реализуйте правило что персонаж не должен покинуть пределы комнаты. Подвигайте персонажа и покажите это графически.


// 3.3. Создать тип Ящик. У ящика также есть координата в комнате X и Y. Ящик также не может покидать пределы комнаты и ящик также должен быть распечатан вместе с персонажем в функции печати.


// 3.4. Теперь самое интересное, персонаж может двигать ящик, если он стоит на том месте, куда персонаж хочет попасть. Главное что ни один объект не может покинуть пределы комнаты. Подвигайте ящик :)


// 3.5. Добавьте точку в комнате, куда надо ящик передвинуть и двигайте :)




// Subscripts
// 4.1. Создайте тип шахматная доска.


// 4.2. Добавьте сабскрипт, который выдает цвет клетки по координате клетки (буква и цифра).


// 4.3. Если юзер ошибся координатами - выдавайте нил


// Крестики нолики (Средний уровень)
// 5.1. Создать тип, представляющий собой поле для игры в крестики нолики. На каждой клетке может быть только одно из значений: Пусто, Крестик, Нолик. Добавьте возможность красиво распечатывать поле


// 5.2. Добавьте сабскрипт, который устанавливает значение клетки по ряду и столбцу, причем вы должны следить за тем, чтобы программа не падала если будет введен не существующий ряд или столбец.


// 5.3. Также следите за тем, чтобы нельзя было устанавливать крестик либо нолик туда, где они уже что-то есть. Добавьте метод очистки поля.


// 5.4. Если хотите, добавте алгоритм, который вычислит победителя

