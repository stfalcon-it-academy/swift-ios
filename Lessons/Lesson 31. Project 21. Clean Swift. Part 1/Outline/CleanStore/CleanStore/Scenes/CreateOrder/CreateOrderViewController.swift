//
//  CreateOrderViewController.swift
//  CleanStore
//
//  Created by Raymond Law on 8/22/15.
//  Copyright (c) 2015 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol CreateOrderViewControllerInput {
    // Receive & displays view model from Presenter
    func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel)
}

protocol CreateOrderViewControllerOutput {
    var shippingMethods: [String] { get }
    func formatExpirationDate(request: CreateOrder.FormatExpirationDate.Request)
}


// MARK: - Clean Swift Component: View Controller (V)
class CreateOrderViewController: UITableViewController {
    // MARK: - Properties
    var output: CreateOrderViewControllerOutput!
    var router: CreateOrderRouter!
  
    @IBOutlet var textFields: [UITextField]!
    @IBOutlet weak var shippingMethodTextField: UITextField!
    @IBOutlet weak var expirationDateTextField: UITextField!
    @IBOutlet var shippingMethodPicker: UIPickerView!
    @IBOutlet var expirationDatePicker: UIDatePicker!

    
    // MARK: - Actions
    @IBAction func expirationDatePickerValueChanged(sender: AnyObject) {
        let date = self.expirationDatePicker.date
        let request = CreateOrder.FormatExpirationDate.Request(date: date)
        
        self.output.formatExpirationDate(request)
    }
    
    @IBAction func handlerTapGesture(sender: UITapGestureRecognizer) {
        self.tableView.endEditing(true)
    }
    
    

    // MARK: - Class Functions
    override func awakeFromNib() {
        super.awakeFromNib()
        
        CreateOrderConfigurator.sharedInstance.configure(self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configurePickers()
        
        // Delegates
        self.shippingMethodTextField.delegate = self
        self.shippingMethodPicker.dataSource = self
        self.shippingMethodPicker.delegate = self
    }

    
    // MARK: - Custom Functions
    func configurePickers() {
        self.shippingMethodTextField.inputView = self.shippingMethodPicker
        self.expirationDateTextField.inputView = self.expirationDatePicker
    }
}


// MARK: - UITextFieldDelegate
extension CreateOrderViewController: UITextFieldDelegate {
    func textFieldShouldReturn(textField: UITextField) -> Bool {
        textField.resignFirstResponder()
    
        if let index = self.textFields.indexOf(textField) {
            if index < textFields.count - 1 {
                let nextTextField = textFields[index + 1]
                nextTextField.becomeFirstResponder()
            }
        }
   
        return true
    }
}


// MARK: - UITableViewDelegate
extension CreateOrderViewController {
    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        if let cell = tableView.cellForRowAtIndexPath(indexPath) {
            for textField in self.textFields {
                if textField.isDescendantOfView(cell) {
                    textField.becomeFirstResponder()
                }
            }
        }
    }
}
  

// MARK: - UIPickerViewDataSource
extension CreateOrderViewController: UIPickerViewDataSource {
    func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int {
        return 1
    }
  
    func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return self.output.shippingMethods.count
    }
}


// MARK: - UIPickerViewDelegate
extension CreateOrderViewController: UIPickerViewDelegate {
    func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return self.output.shippingMethods[row]
    }
  
    func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        self.shippingMethodTextField.text = output.shippingMethods[row]
    }
}



// MARK: - CreateOrderViewControllerInput
extension CreateOrderViewController: CreateOrderViewControllerInput {
    func displayExpirationDate(viewModel: CreateOrder.FormatExpirationDate.ViewModel) {
        self.expirationDateTextField.text = viewModel.date
    }
}

