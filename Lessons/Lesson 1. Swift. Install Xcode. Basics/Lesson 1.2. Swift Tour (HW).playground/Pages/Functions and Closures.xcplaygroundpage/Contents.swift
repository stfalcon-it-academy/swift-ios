/*:
 ## Functions and Closures (Функции и замыкания)
 */
//:
//: Чтобы объявить функцию используйте оператор `func`. Чтобы вызвать функцию, просто напишите ее имя со списком аргументов в скобках. Используйте `–>`, чтобы отделить имена и типы аргументов от возвращаемого типа функции.
//:
func greet(name: String, day: String) -> String {
    return "Hello \(name), today is \(day)."
}

greet("Bob", day: "Tuesday")
//:
/*:
 * experiment:
 Удалите аргумент `day`. Добавьте новый аргумент, чтобы вставить в привествие название специального блюда.
 */
//:
//: Кортеж используется для создания единого составного значения, например, в качестве возвращаемого результата из функции. Ссылаться на элементы кортежа можно либо через имена, либо через их порядковые номера.
//:
func calculateStatistics(scores: [Int]) -> (min: Int, max: Int, sum: Int) {
    var min = scores[0]
    var max = scores[0]
    var sum = 0

    for score in scores {
        if score > max {
            max = score
        } else if score < min {
            min = score
        }
        
        sum += score
    }

    return (min, max, sum)
}

let statistics = calculateStatistics([5, 3, 100, 3, 9])
print(statistics.sum)
print(statistics.2)
//:
//: Функция также может принимать переменное количество аргументов, собирая их в массив:
//:
func sumOf(numbers: Int...) -> Int {
    var sum = 0

    for number in numbers {
        sum += number
    }
    
    return sum
}

sumOf()
sumOf(42, 597, 12)
//:
/*:
 * experiment:
 Напишите функцию, которая бы считала среднее значение своих аргументов.
 */
//:
//: Функции могут быть вложенными. Вложенные функции имеют доступ к переменным, которые были объявлены во внешней функции. Вы можете использовать вложенные функции, чтобы упорядочивать код в длинных или сложных функциях.
//:
func returnFifteen() -> Int {
    var y = 10
    
    func add() {
        y += 5
    }
    
    add()
    
    return y
}

returnFifteen()
//:
//: Функция - это тип первого класса. Это означает, что возвращаемым значением (результатом) функции может выступать другая функция.
//:
func makeIncrementer() -> ((Int) -> Int) {
    func addOne(number: Int) -> Int {
        return 1 + number
    }

    return addOne
}

var increment = makeIncrementer()
increment(7)
//:
//: Функция может принимать другую функцию в качестве одного из входных аргументов.
//:
func hasAnyMatches(list: [Int], condition: (Int) -> Bool) -> Bool {
    for item in list {
        if condition(item) {
            return true
        }
    }
   
    return false
}

func lessThanTen(number: Int) -> Bool {
    return number < 10
}

var numbers = [20, 19, 7, 12]
hasAnyMatches(numbers, condition: lessThanTen)
//:
//: На самом деле функции - частный случай замыканий. Замыкание представляет из себя блок кода, который может быть вызван позже. Код внутри замыкания имеет доступ к таким объектам, как переменные и функции, которые были созданы в тех же рамках, что и сами замыкания. Даже если замыкание находится и запускается в другом блоке - вы уже видели пример такой реализации во вложенных функциях. Вы можете написать замыкание без имени, просто обозначив код фигурными скобками и круглыми скобками `({})`. Внутри скобок используется оператор `in` для отделения аргументов и возвращаемого типа от тела самого замыкания.
//:
numbers.map({
    (number: Int) -> Int in
    let result = 3 * number

    return result
})
//:
/*:
 * experiment:
 Перепишите замыкание так, чтобы оно вернуло ноль для всех нечетных чисел.
 */
//:
//: Существует несколько способов краткого описания замыкания. Когда тип замыкания заранее известен, например - обратный вызов делегата `(callback)`, вы можете опустить тип его аргументов, тип возвращаемого значения, либо и то и другое. Одиночный оператор замыкания неявно возвращает значение своего единственного выражения.
//:
let mappedNumbers = numbers.map({ number in 3 * number })
print(mappedNumbers)

//: Вы можете обращаться к аргументам замыкания по имени или по номеру. Второй вариант особенно полезен в очень коротких замыканиях. Когда замыкание представляет из себя единственный входной аргумент функции круглые скобки опускаются.
//:
let sortedNumbers = numbers.sort{ $0 > $1 }
print(sortedNumbers)
//:
/*:
 
 */
//: [Control Flow](@previous) | [Objects and Classes](@next)
