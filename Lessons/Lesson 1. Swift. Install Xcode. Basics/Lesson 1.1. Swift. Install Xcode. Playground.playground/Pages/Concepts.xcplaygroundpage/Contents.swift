//: ## Concepts (Термины. Основные понятия)
//:
/*: 
 ### Определения:

 1. завершенная команда языка `Swift` называется `выражением`.
 
 
 2. `оператор` — это минимальная автономная единица (слово или группа слов), выполняющая определенную команду.

 
 3. `модификаторы` — это функциональные единицы, расширяющие возможности операторов.

 
 4. `объявление` — это создание нового объекта, с которым планируется взаимодействие.


 5. `инициализация` — это присвоение объявленному объекту определенного значения.


 6. значения, которые операторы затрагивают в своей работе называются `операндами`.


 7. `простые операторы` выполняют операции с различными операндами. В их состав входят `унарные` (префиксные и постфиксные) и `бинарные` (инфиксные) операторы. `Структурные операторы` влияют на ход выполнения программы. `Тернарный оператор` выполняет операции с тремя операндами. Оператор присваивания (`=`) —  это особый бинарный оператор. Он используется в типовом выражении `a = b`, инициализируя значение объекта `a` значением объекта `b`. Левая и правая части оператора присваивания должны быть однотипными (то есть иметь одинаковый тип).


 8. `Переменная` — это некоторая именованная область (хранилище), в которой может храниться некоторое значение. Значение переменной может меняться с течением времени.


 9. В языке `Swift` есть возможность единожды указать значение переменной и лишить ее возможности изменять это значение в будущем. Такие переменные имеют собственное название — `константы`. Они объявляются с помощью оператора `let`. Другими словами, `константа` —  это некоторое именованное хранилище, значение которого можно задать лишь один раз.


 10. Объявляемые в одном выражении переменные и константы необходимо разделять символом `запятая`.


 11. Переменные и константы следует именовать в нижнем камелкейс-стиле: `myBestText`, `theBestCountry`, `highScore`.


 12. Имена должны быть уникальными.


 13. Вывод на консоль осуществляется с помощью глобальной функции `print()`.


 14. `Функция` — это именованный фрагмент программного кода, к которому можно обращаться многократно. Функции предназначены для того, чтобы избежать дублирования кода. Они группируют часто используемый код и позволяют обращаться к нему с помощью уникального имени.


 15. `Комментарии` помогают нам не запутаться и не забыть о предназначении написанного.


 16. `Swift` не требует ставить точку с запятой в конце завершенного выражения. Единственным исключением является ситуация, когда в одну строку пишется сразу несколько команд.
*/
import Foundation

// Это - пример однострочного комментария

/* это - пример
    многострочного
        комментария */


//: *Пример использования markdown комментариев:*
//: Это - markdown комментарий

//: Объявим переменную
var str1 = "Hello, world!"
//:
//: А это - *курсивный текст*
var str2 = "Hello, world!"
//:
//: А это - `жирный текст`
var str3 = "Hello, world!"
//:
//: ----------------------
//:
/*:
 
*/
//: [Playground](@previous) | [Links](@next)
