/*: 
 ### Example 1 (Пример 1)
 */
//:

import Foundation

// Код выполняется сверху -> вниз

// Переменная или константа должна быть сначала объявлена и лишь затем использована в коде - относится к "зоне видимости" значений

// Именование переменных и констант - принцип lowerCamelCase (горбатый регистр на английском языке)

// Инициализация 3-х констант
let redColor = "red"
let greenColor = "green"
let blueColor = "blue"

// Объявление переменной с типом String
var color: String

// Последующая инициализация объявленной ранее переменной
color = redColor

// Повторный вывод имени переменной нужен для того, чтобы убедиться в правильности присвоение нового значения
color

// Пример использования Type Annotation (Аннотация типов)
var radiusOfCircle: Int
var areaOfCircle: Float
var PI: Double
var isPresent: Bool
var message: String
var uniCode: Character

// Ошибка типа (типобезопастность) и пример выхода из проблемной ситуации
// color = 2.5
color = String(2.5)

// Пример использования оператора вывода в консоль
print(color)
print(redColor, color, greenColor)

color = greenColor
color
print(color)

color = "abrakadabra"
color
print(color)

// Пример интерполяции (редактирования) строк
print("Red color value = \(redColor)\nGreen color value = \(greenColor)")
//:
/*:
 ## 
 
 `Swift` позволяет прервать выполнение программы в случае, когда некоторое условие не выполняется, для этого служит специальный
 механизм утверждений (`assertions`). Утверждения используются на этапе отладки программы.

 
 Утверждение представляет собой специальную функцию `assert()`, производящую проверку некоторого условия на предмет его истинности. В данную функцию передаются следующие входные параметры:
 
 * проверяемое условие
 * отладочное сообщение
 
 Можно сказать, что функция `assert()` «утверждает», что переданное ей условие истинно. Если функция возвращает `true`, то выполнение программы продолжается; если же функция возвращает `false`, то выполнение программы завершается.
 */
//:
let studentAge = 88

assert(studentAge < 90, "Ваш студент слишком стар, чтобы учиться")
print("studentAge = \(studentAge)")
//:
/*:
 Утверждения следует использовать, когда значение условия однозначно должно быть равно `true`, но есть вероятность, что оно вернет `false`. Таким образом, с помощью функции `assert()` вы легко можете проверить, имеет ли некоторый опционал какое-либо значение. Для этого необходимо всего лишь сравнить (с помощью оператора сравнения) `опционал` и `nil`.
 */
//:
var isMaxStudent: Bool? = true
assert(isMaxStudent != nil, "Максим не является студентом")
//:
//: Недостатком данного подхода является то, что механизм утверждений позволяет лишь прервать выполнение программы и вывести отладочное сообщение. Выполнить произвольный код в зависимости от результата проверки он не позволяет.
//:
/*:
 
 */
//: [Assertions](@previous) | [Example 2](@next)
