/*:
 ## Numeric Literals (Числовые литералы)
 */
//:
/*:
 Числовые литералы могут быть написаны как:
 
 * Десятичное число, без префикса
 * Двоичное число, с префиксом `0b`
 * Восьмеричное число, с префиксом `0o`
 * Шестнадцатеричное число, с префиксом `0x`
 */
//:
//: Все эти литералы целого числа имеют десятичное значение `17`:
import Foundation

let decimalInteger = 17
let binaryInteger = 0b10001
let octalInteger = 0o21
let hexadecimalInteger = 0x11
//:
//: Литералы с плавающей запятой могут быть десятичными (без префикса) или шестнадцатеричными (с префиксом `0x`). Они всегда должны иметь число (десятичное или шестнадцатеричное) по обе стороны от дробной точки. Они также могут иметь экспоненту, с указанием в верхнем или нижнем регистре `е` для десятичных чисел с плавающей запятой или в верхнем или нижнем регистре `р` для шестнадцатеричных чисел с плавающей запятой.
//:
//: Для десятичных чисел с показателем степени `ехр`, базовое число умножается на `10exp`:
//:
// 1.25 * (10 * 10)
1.25e2

// 1.25 / (10 * 10)
1.25e-2
//:
//: Для шестнадцатеричных чисел с показателем степени `ехр`, базовое число умножается на `2exp`:
//:
// 15 * (2 * 2)
0xFp2

// 15 / (2 * 2)
0xFp-2
//:
//: Все эти числа с плавающей запятой имеют десятичное значение `12.1875`:
//:
let decimalDouble = 12.1875
let exponentDouble = 1.21875e1
let hexadecimalDouble = 0xC.3p0
//:
//: Числовые литералы могут содержать дополнительное форматирование, чтобы их было удобнее читать. Целые числа и числа с плавающей запятой могут быть дополнены нулями или содержать символы подчеркивания для улучшения читабельности. Ни один тип форматирования не влияет на базовое значение литерала:
//:
let paddedDouble = 000123.456
let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1
//:
//:
/*:
 
 */
//: [Type Safety and Type Inference](@previous) | [Numeric Type Conversion](@next)
