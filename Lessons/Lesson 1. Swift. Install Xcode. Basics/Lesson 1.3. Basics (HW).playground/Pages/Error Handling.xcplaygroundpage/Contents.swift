/*: 
 ## Error Handling (Обработка ошибок)
 */
//:
//: Вы используете обработку ошибок в ответ на появление условий возникновения ошибок во время выполнения программы.
//:
//: В отличие от опционалов, которые могут использовать наличие или отсутствие значения для сообщения об успехе или неудаче функции, обработка ошибок позволяет определить причину сбоя и при необходимости передать ошибку в другую часть вашей программы.
//:
//: Когда функция обнаруживает условие ошибки, она выдает сообщение об ошибке. Тот, кто вызывает функцию, может затем поймать ошибку и среагировать соответствующим образом.
//:
import Foundation

func canThrowAnError() throws {
    // эта функция может сгенерировать ошибку
}
//:
//: Функция сообщает о возможности генерации ошибки, включив ключевое слово `throw` в сообщение. Когда вы вызываете функцию, которая может сгенерировать ошибку, вы добавляете ключевое слово `try` в выражение. //:
//:
//: `Swift` автоматически передает ошибки из их текущей области, пока они не будут обработаны условием `catch`.
//:
do {
    try canThrowAnError()
    // ошибка не была сгенерирована
} catch {
    // ошибка сгенерирована
}
//:
//: Выражение `do` создает блок кода, который передает ошибки в одно или несколько условий `catch`.
//:
/*:
 Ниже приведен пример того, как может быть использована обработка ошибок:

    func makeASandwich() throws {
        // ...
    }

    do {
        try makeASandwich()
        eatASandwich()
    } catch Error.OutOfCleanDishes {
        washDishes()
    } catch Error.MissingIngredients(let ingredients) {
        buyGroceries(ingredients)
    }
 */
//:
//: В этом примере, функция `makeASandwich()` сгенерирует ошибку при условии, если нет чистых тарелок или если отсутствуют какие-либо ингредиенты. Так как `makeASandwich()` может выдать ошибку, то вызов функции заворачивают в выражение `try`. При заворачивании вызова функции в выражение `do` сгенерированные ошибки будут передаваться на соответствующие условия `catch`.
//:
//: Если ошибка не генерируется, то вызывается функция `eatASandwich()`. Если ошибка все таки генерируется и она соответствует `Error.OutOfCleanDishes`, то вызывается функция `washDishes()`. Если генерируется ошибка и она соответствует `Error.MissingIngredients`, то функция `buyGroceries(_:)` вызывается с соответствующим значением `[String]`, захваченным шаблоном `catch`.
//:
//: Генерацию, вылавливание и передачу ошибок более подробно мы рассмотрим на уроке **Обработка ошибок**.
//:
/*:
 
 */
//: [Optionals](@previous) | [Assertions](@next)
