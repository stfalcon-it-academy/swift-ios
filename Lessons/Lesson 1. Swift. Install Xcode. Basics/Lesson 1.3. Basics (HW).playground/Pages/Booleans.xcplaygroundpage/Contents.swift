/*: 
 ## Booleans (Логические типы)
 */
//:
//: В `Swift` есть простой логический тип `Bool`. Этот тип называют логическим, потому что он может быть только `true` или `false`. `Swift` предусматривает две логические константы, `true` и `false` соответственно:
//:
import Foundation

let orangesAreOrange = true
let turnipsAreDelicious = false
//:
//: Типы для `orangesAreOrange` и `turnipsAreDelicious` были выведены как `Bool`, исходя из того факта, что мы им присвоили логические литералы. Так же, как и в случае с `Int` и `Double` вам не нужно явно указывать тип `Bool` для констант или переменных, если они будут инициированы одним из возможных значений - `true` или `false`. Вывод типов помогает сделать код `Swift` кратким и читабельным тогда, когда константы или переменные создаются с заранее известными значениями.
//:
//: Логические значения очень часто используются ппри работе с условными операторами, такими, как оператор `if`:
//:
if turnipsAreDelicious {
    print("Mmm, tasty turnips!")
} else {
    print("Eww, turnips are horrible.")
}
//:
//: Более подробно **Условные операторы** мы рассмотрим на уроке **Управление потоком**.
//:
//: Строгая типизация `Swift` препятствует замене значения `Bool` на не логическое значение. Следующий пример выведет ошибку компиляции:
/*:
    let i = 1

    if i {
        // this example will not compile, and will report an error
    }
 */
//:
//: Ниже приведен альтернативный рабочий вариант:
//:
let i = 1

if i == 1 {
    // this example will compile successfully
}
//:
//: Результат сравнения `i == 1` имеет тип `Bool`, поэтому этот пример совершает проверку типов.
//:
//: Как и в других примерах строгой типизации для языка `Swift` этот подход предотвращает случайные ошибки и гарантирует, что замысел определенной части кода понятен.
//:
/*:
 
 */
//: [Type Aliases](@previous) | [Tuples](@next)

