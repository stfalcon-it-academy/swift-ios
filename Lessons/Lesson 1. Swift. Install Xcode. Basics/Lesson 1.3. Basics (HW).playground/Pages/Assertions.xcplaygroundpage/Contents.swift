/*: 
 ## Assertions (Утверждения)
 */
//:
/*:
 Опционалы позволяют проверить существует значение или нет, а также писать код, который корректно относится к отсутствию значения. Однако, в некоторых случаях ваш код не может быть выполнен при отсутствии соответствующего значения или если данное значение не удовлетворяет определенным условиям. В таких случаях вы можете в коде вызвать утверждение (`assertion`) для остановки выполнения и поиска причины для отсутствующего или недопустимого значения.
*/
//: ### Debugging with Assertions (Отладка с помощью утверждений)
//:
//: Утверждение представляет собой `runtime` проверку того, что логическое условие определенно вычисляется как `истина`. Иными словами, утверждение «утверждает», что условие истинно. Перед тем, как выполнить следующий код используйте утверждение чтобы убедиться, что главное условие выполняется. Если условие истинно, выполнение кода продолжится как обычно. Если условие ложное, выполнение кода прекратится и ваше приложение завершит свою работу.
//:
//: Если ваш код вызывает утверждение во время работы в отладочной среде, например, когда вы запускаете приложение в `Xcode`, вы можете увидеть, где именно появится неверное состояние и запросить состояние вашего приложения в момент, когда утверждение было вызвано. Утверждение также позволяет обеспечить подходящим отладочным сообщением, отражающим суть утверждения.
//:
//: Утверждения можно писать через вызов глобальной функции `assert(_:_:file:line:)`. Вы передаете в функцию некое выражение, которое оценивается как `true` или `false`, а также текст сообщения, которое должно отображается в случае выполнения условия `false`:
//:
import Foundation

let age = -3

assert(age >= 0, "A person's age cannot be less than zero")
//:
//: В этом примере выполнение кода продолжится, если `age >= 0` вернет `true`, что может случиться, если значение `age` не отрицательное. Если значение `age` - отрицательное, тогда `age >= 0` вернет `false` и утверждение выполнится, завершив за собой приложение.
//:
//: По желанию, сообщение утверждения можно пропускать, как например в следующем примере:
//:
assert(age >= 0)
//:
/*:
 * note:
 Утверждения автоматически выключены, когда ваш код компилируется с оптимизациями, например с дефолтной конфигурацией релиза таргета вашего приложения в `Xcode`.
 */
//: ### When to Use Assertions (Когда использовать утверждения)
//:
/*:
 Используйте утверждения, когда условие, возможно, может стать `false`, но для продолжения выполнения кода оно определенно должно быть `true`. Подходящие сценарии для проверки утверждения включают:
 
 * Индекс целого числа передается для работы над пользовательским индексом, но значение индекса может быть слишком маленьким или слишком большим.
 
 
 * Значение передается функции, но если значение недопустимо, это будет означать, что функция не сможет выполнить свою задачу.
 
 
 * Опциональное значение в текущем состоянии `nil`, но значение `не-nil` необходимо для последующего успешного выполнения кода.
 */
//:
/*:
 * note:
 Утверждения приводят к завершению вашего приложения и не являются заменой проектирования кода в надежде, что недействительные условия вряд ли возникнут. Тем не менее, в ситуациях, когда недопустимые условия возможны, утверждение является эффективным способом для того, чтобы такие условия были выделены и замечены во время разработки, перед публикацией вашего приложения.
 */
//:
/*:
 
 */
//: [Error Handling](@previous) | [Example 1](@next)
